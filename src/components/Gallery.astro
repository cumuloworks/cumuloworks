---
import { Image } from 'astro:assets';

const { folderPath } = Astro.props;

const galleryImages = await getImagesFromFolder(folderPath);

const preparedImages = await Promise.all(
    galleryImages.map(async (image, index) => {
        return {
            src: image,
            alt: image.src.split('/').pop()?.split('.')[0] || `gallery-${index}`,
            id: `image-${index}`,
        };
    })
);

async function getImagesFromFolder(folderPath) {
    const images = import.meta.glob('/src/**/*.(png|jpg|jpeg|gif|webp|PNG|JPG|JPEG|GIF|WEBP)', {
        eager: true,
    });
    const filteredImages = Object.entries(images)
        .filter(([path]) => {
            const isInFolder = path.startsWith(folderPath);
            const isNotThumb = !/thumb\.(jpg|jpeg|png|gif|webp)$/i.test(path);
            return isInFolder && isNotThumb;
        })
        .map(([_path, imageModule]) => {
            return imageModule.default;
        });
    return filteredImages;
}
---

{
    galleryImages.length > 0 && (
        <div class="not-prose mt-20">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-1">
                {preparedImages.map((image, index) => (
                    <div
                        class="w-full"
                        key={image.id}
                    >
                        <Image
                            src={image.src}
                            alt={image.alt}
                            class="w-full h-auto object-contain"
                            loading={index < 4 ? "eager" : "lazy"}
                            id={image.id}
                            width={1280}
                        />
                    </div>
                ))}
            </div>
        </div>
    )
}
