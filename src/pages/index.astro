---
import Layout from "@/layouts/Layout.astro";
import readmeRaw from "@/../README.md?raw";
import { getItemsWithThumbnails } from "@/utils/contentUtils";
import { createMarkdownProcessor } from "@astrojs/markdown-remark";

const projects = await getItemsWithThumbnails("projects");
const blogs = await getItemsWithThumbnails("blogs");
const downloads = await getItemsWithThumbnails("downloads");
const links = [
	{
		title: "Privacy Policy",
		href: "/privacy",
	},
	{
		title: "特定商取引法に基づく表示",
		href: "/scta",
		note: "(Notation based on the Specified Commercial Transactions Act of Japan)",
	},
];

function makeListMarkdown(items) {
	return items
		.map(
			(item) =>
				`- [${item.data.title}](/${item.collection}/${item.slug})`,
		)
		.join("\n");
}

function makeLinksMarkdown(linkItems) {
	return linkItems
		.map(
			(item) =>
				`- [${item.title}](${item.href})${item.note ? " " + item.note : ""}`,
		)
		.join("\n");
}

function buildSectionMarkdown(heading, content) {
	return `### ${heading}\n\n${content}`;
}

const sections = [
	[
		"<!-- Ads -->",
		buildSectionMarkdown(
			"Ads",
			makeListMarkdown(projects.filter((p) => p.data.category === "ads")),
		),
	],
	[
		"<!-- Entertainment -->",
		buildSectionMarkdown(
			"Entertainment",
			makeListMarkdown(
				projects.filter((p) => p.data.category === "entertainment"),
			),
		),
	],
	[
		"<!-- Articles -->",
		`${buildSectionMarkdown("Blogs", makeListMarkdown(blogs))}\n\n${buildSectionMarkdown("Downloads", makeListMarkdown(downloads))}`,
	],
	["<!-- Links -->", `## Links\n\n${makeLinksMarkdown(links)}`],
];

const readmeWithInjectedLists = sections.reduce(
	(acc, [marker, content]) => acc.replace(marker, content),
	readmeRaw,
);

const markdown = await createMarkdownProcessor();
const { code: readmeHTML } = await markdown.render(readmeWithInjectedLists);
---

<Layout
	title="Cumuloworks"
	description="Cumuloworks | Director / Motion Grapher / CG Generalist"
	limit={false}
	header={false}
>
	<div set:html={readmeHTML} />
</Layout>
