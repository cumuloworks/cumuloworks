---
import ItemGrid from "../../components/content/ItemGrid.astro";
import ItemList from "../../components/content/ItemList.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getItemsWithThumbnails } from "../../utils/contentUtils";
import "../../styles/markdown.css";
import { Icon } from "astro-icon/components";

export const prerender = true;
export async function getStaticPaths() {
    const bases = ["projects", "blogs", "downloads"];
    return bases.map((base) => ({
        params: { base },
        props: { base },
    }));
}

const { base } = Astro.props;
const items = await getItemsWithThumbnails(base);
const categories = [...new Set(items.map((item) => item.data.category))];
const title = base.charAt(0).toUpperCase() + base.slice(1);
---

<BaseLayout title={title}>
    <div class="w-full max-w-screen-xl mx-auto mb-10">
        <div
            class="w-full flex flex-col md:flex-row items-center justify-between mb-10 gap-5">
            <h1 class="text-center uppercase text-3xl md:text-4xl font-bold">
                {title}
            </h1>
            <div
                id="filter-controls"
                class="rounded-full border border-cumulo-inactive text-sm">
                <button
                    id="all-filter"
                    class="px-5 py-1 rounded-full transition-all ease-out-expo hover:scale-105"
                    >All</button
                >
                {
                    categories.map((category: string) => (
                        <button
                            class="px-5 py-1 rounded-full transition-all ease-out-expo hover:scale-105"
                            id={`${category}-filter`}>
                            {category.charAt(0).toUpperCase() +
                                category.slice(1)}
                        </button>
                    ))
                }
            </div>
        </div>
        {
            base === "projects" ? (
                <ItemGrid base={base} items={items} />
            ) : (
                <ItemList base={base} items={items} />
            )
        }
    </div>
    <button
        id="backToTopButton"
        class="mx-auto flex items-center gap-5 justify-center md:justify-end uppercase group h-10"
        >Back to the top
        <Icon
            name="fa6-solid:arrow-up"
            class="size-5 group-hover:size-10 transition-all ease-out-expo"
        />
    </button>
</BaseLayout>

<style>
    #filter-controls button.active {
        @apply bg-cumulodark text-active;
    }
</style>

<script>
    const filterButtons = document.querySelectorAll("#filter-controls button");
    const gridItems = document.querySelectorAll(".grid-item");
    const allFilterButton = document.getElementById("all-filter");
    const backToTopButton = document.getElementById("backToTopButton");

    function setActiveFilter(button) {
        filterButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        const filter = button.id.replace("-filter", "");
        gridItems.forEach((item) => {
            if (filter === "all" || item.dataset.category === filter) {
                item.style.display = "block";
            } else {
                item.style.display = "none";
            }
        });
    }

    filterButtons.forEach((button) => {
        button.addEventListener("click", () => setActiveFilter(button));
    });

    if (allFilterButton) {
        setActiveFilter(allFilterButton);
    }

    if (backToTopButton) {
        backToTopButton.addEventListener("click", () => {
            window.scrollTo({
                top: 0,
                behavior: "smooth",
            });
        });
    }
</script>
